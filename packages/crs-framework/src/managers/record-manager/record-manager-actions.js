import{ModelProxyHandler as r}from"./model-proxy.js";class l{static async perform(t,s,e,a){await this[t.action]?.(t,s,e,a)}static async register(t,s,e,a){globalThis.recordDefinitions==null&&(globalThis.recordDefinitions={});const n=await crs.process.getValue(t.args.manager,s,e,a),o=await crs.process.getValue(t.args.data,s,e,a);p(o),globalThis.recordDefinitions[n]=o}static async unregister(t,s,e,a){const n=await crs.process.getValue(t.args.manager,s,e,a);delete globalThis.recordDefinitions[n]}static async set_default(t,s,e,a){}static async remove_default(t,s,e,a){}static async set_conditional_default(t,s,e,a){}static async remove_conditional_default(t,s,e,a){}static async set_validation(t,s,e,a){}static async remove_validation(t,s,e,a){}static async set_conditional_validation(t,s,e,a){}static async remove_conditional_validation(t,s,e,a){}static async register_callback(t,s,e,a){}static async unregister_callback(t,s,e,a){}static async callback(t,s,e,a){}static async validate(t,s,e,a){}static async create(t,s,e,a){const n=await crs.process.getValue(t.args.manager,s,e,a),o=d(n);return new Proxy(o,r)}}function d(i){const t=globalThis.recordDefinitions[i];if(t==null)return{};const s={$manager:i};for(const e of t.fields){const a=e.name||e.field;s[a]=e.default||null}return s}async function p(i){for(const t of i.fields)if(t.conditionalDefaults!=null){const s=i.conditionalDefaultsMap||={};for(const e of t.conditionalDefaults){const a=await crs.binding.expression.sanitize(e.conditionExpr,"model"),n=a.properties;for(const o of n){const c=t.field||t.name;s[o]||=[],s[o].push(c)}e.conditionExpr=new Function("model",`return ${a.expression}`)}}}crs.intent.record_manager=l;
