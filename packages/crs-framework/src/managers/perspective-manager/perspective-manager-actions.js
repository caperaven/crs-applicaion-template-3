class h{static async perform(e,s,t,i){await this[e.action]?.(e,s,t,i)}static async register(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i);r!=null&&(globalThis.perspectives==null&&(globalThis.perspectives={}),globalThis.perspectives[r]==null?globalThis.perspectives[r]={count:1}:globalThis.perspectives[r].count+=1)}static async unregister(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i);if(r==null)return;const a=globalThis.perspectives[r];a!=null&&(a.count-=1,a.count===0&&delete globalThis.perspectives[r])}static async get(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i);if(r!=null)return JSON.parse(JSON.stringify(globalThis.perspectives[r]))}static async add_filter(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i),a=await crs.process.getValue(e.args.field,s,t,i),l=await crs.process.getValue(e.args.operator,s,t,i),n=await crs.process.getValue(e.args.value,s,t,i),p=await crs.process.getValue(e.args.replace||!0,s,t,i),c=globalThis.perspectives[r];if(c.filter||=[],p){const v=c.filter.filter(o=>o.field===a);for(const o of v){const d=c.filter.indexOf(o);c.filter.splice(d,1)}}const u={field:a,operator:l,value:n};c.filter.push(u),await g(r)}static async remove_filter(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i),a=globalThis.perspectives[r];if(a==null)return;const l=await crs.process.getValue(e.args.field,s,t,i),n=a.filter.find(c=>c.field===l);if(n==null)return;const p=a.filter.indexOf(n);a.filter.splice(p,1),a.filter.length===0&&delete a.filter,await g(r)}static async set_grouping(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i),a=globalThis.perspectives[r];if(a==null)return;const l=await crs.process.getValue(e.args.fields,s,t,i);a.grouping=l,await g(r)}static async expand_grouping(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i)}static async collapse_grouping(e,s,t,i){const r=await crs.process.getValue(e.args.perspective,s,t,i)}}async function g(f){if(globalThis.dataManagers!=null)for(const e of Object.keys(globalThis.dataManagers)){const s=globalThis.dataManagers[e];s.perspective===f&&await s.perspectiveChanged()}}crs.intent.perspective=h;export{g as notifyPerspectiveChanged};
