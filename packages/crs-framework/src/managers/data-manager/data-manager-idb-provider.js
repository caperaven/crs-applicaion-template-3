import{BaseDataManager as i}from"./data-manager-base.js";const t="data-manager";class d extends i{#e;#s;get storeName(){return this.#e}set records(e){this.setRecords(e).catch(s=>console.error(s))}dispose(){crs.call("idb","release_stores",{name:t,stores:[this.#e]}).catch(e=>console.error(e)),super.dispose()}async setRecords(e){await super.setRecords(e);const s=await crs.call("idb","set",{name:t,store:this.#e,records:e,clear:!0});this.#e=s.data,this.#s=`${t}_${this.#e}`}async append(...e){await crs.call("idb","set",{name:t,store:this.#e,records:e,clear:!1})}async getAll(){return await crs.call("idb","get_all",{name:t,store:this.#e})}async getPage(e,s){return await crs.call("idb","get_batch",{name:t,store:this.#e,startIndex:e,endIndex:s})}async getByIndex(e){return await crs.call("idb","get",{name:t,store:this.#e,indexes:[e]})}async getById(e){return await crs.call("idb","get_by_id",{name:t,store:this.#e,id:e})}async getIds(e){const s=await crs.call("idb","get",{name:t,store:this.#e,indexes:e}),a=[];for(const r of s)a.push(r[this.idField])}async removeIndexes(e){await crs.call("idb","delete_by_index",{name:t,store:this.#e,index:e})}async removeIds(e){await crs.call("idb","delete_by_id",{name:t,store:this.#e,ids:e})}async updateIndex(e,s){await crs.call("idb","change_by_index",{name:t,store:this.#e,index:e,changes:s})}async updateId(e,s){await crs.call("idb","change_by_id",{name:t,store:this.#e,id:e,changes:s})}async setSelectedIndexes(e,s){const a=e.map(r=>({type:"index",values:{index:r,selected:s}}));sessionStorage.setItem(this.#s,JSON.stringify(a))}async setSelectedIds(e,s){const a=await crs.call("idb","get_by_id",{name:t,store:this.#e,ids:e});return await this.setSelectedIndexes(a,s)}async getSelected(e=!0){const s=sessionStorage.getItem(this.#s)}async toggleSelectedIndexes(e){}async toggleSelectedIds(e){}async setSelectedAll(e){sessionStorage.setItem(this.#s,JSON.stringify({type:"all"}))}}export{d as DataManagerIDBProvider};
