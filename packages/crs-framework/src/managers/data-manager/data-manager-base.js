class s{#n;#s;#t=0;#i=0;#e=[];get count(){return this.#t}set count(t){this.#t=t}get selectedCount(){return this.#i}set selectedCount(t){this.#i=t}get isAllSelected(){return this.selectedCount===0?!1:this.selectedCount===this.count?!0:"mixed"}get idField(){return this.#s}get eventCount(){return this.#e.length}constructor(t,e){this.#n=t,this.#s=e}dispose(){this.#n=null,this.#s=null,this.#e=null,this.#t=null,this.#i=null}async setRecords(t){this.#t=t?.length||0;for(let e=0;e<t.length;e++)t[e]._index=e}async append(t){this.#t+=t}async removeIndexes(t){this.#t-=t}async removeIds(t){this.#t-=t}async addChangeCallback(t){this.#e.indexOf(t)==-1&&this.#e.push(t)}async removeChangeCallback(t){const e=this.#e.indexOf(t);e!=-1&&this.#e.splice(e,1)}async notifyChanges(t){t.managerId=this.#n;for(let e of this.#e)await e(t)}async beginTransaction(){return null}async commit(){return null}async rollback(){return null}}export{s as BaseDataManager};
