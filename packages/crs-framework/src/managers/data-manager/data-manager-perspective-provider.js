import{BaseDataManager as g}from"./data-manager-base.js";import{CHANGE_TYPES as n}from"./data-manager-types.js";class h extends g{#t;#s;#e;#a;get perspective(){return this.#a}set perspective(e){this.#a=e}get manager(){return this.#e}set manager(e){this.#e=e}get records(){return this.#t}set records(e){this.#t=e}get grouping(){return this.#s}set grouping(e){this.#s=e}async notifyChanges(e){return globalThis.dataManagers[this.#e].notifyChanges(e)}setRecords(e){return globalThis.dataManagers[this.#e].setRecords(e)}append(...e){return globalThis.dataManagers[this.#e].append(...e)}async getAll(){const e=globalThis.dataManagers[this.#e],t=[];for(const a of this.#t)t.push(await e.getByIndex(a));return t}async getPage(e,t){if(this.#t==null||this.#t.length===0)return[];const a=globalThis.dataManagers[this.#e],s=this.#t.slice(e,t),r=[];for(const i of s)r.push(await a.getByIndex(i));return r}getByIndex(e){return globalThis.dataManagers[this.#e].getByIndex(e)}getById(e){return globalThis.dataManagers[this.#e].getById(e)}getIds(e){return globalThis.dataManagers[this.#e].getIds(e)}removeIndexes(e){return globalThis.dataManagers[this.#e].removeIndexes(e)}removeIds(e){return globalThis.dataManagers[this.#e].removeIds(e)}updateIndex(e,t){return globalThis.dataManagers[this.#e].updateIndex(e,t)}updateId(e,t){return globalThis.dataManagers[this.#e].updateId(e,t)}setSelectedIndexes(e,t){return globalThis.dataManagers[this.#e].setSelectedIndexes(e,t)}setSelectedIds(e,t){return globalThis.dataManagers[this.#e].setSelectedIds(e,t)}getSelected(e=!0){return globalThis.dataManagers[this.#e].getSelected(e)}toggleSelectedIndexes(e){return globalThis.dataManagers[this.#e].toggleSelectedIndexes(e)}toggleSelectedIds(e){return globalThis.dataManagers[this.#e].toggleSelectedIds(e)}setSelectedAll(e){return globalThis.dataManagers[this.#e].setSelectedAll(e)}async perspectiveChanged(){const e=await crs.call("perspective","get",{perspective:this.#a});if(Object.keys(e).length===1)return await this.notifyChanges({action:n.perspectiveRollback});const t=await crs.call("data_manager","get_all",{manager:this.#e});if(e.filter.length===1)e.filter=e.filter[0];else{const s=e.filter;e.filter={operator:"and",expressions:s}}const a=await crs.call("data_processing","get_perspective",{source:t,intent:e});Array.isArray(a)&&(this.#t=a,this.count=a.length,this.selectedCount=0),await this.notifyChanges({action:n.perspectiveChanged,count:a.length})}}export{h as DataManagerPerspectiveProvider};
