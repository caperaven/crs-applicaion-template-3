import{CHANGE_TYPES as o,MANAGER_TYPES as d}from"./data-manager-types.js";class u{static async perform(a,e,s,t){await this[a.action]?.(a,e,s,t)}static async register(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t),n=await crs.process.getValue(a.args.id_field||"id",e,s,t),g=await crs.process.getValue(a.args.type||"idb",e,s,t),l=await crs.process.getValue(a.args.records||[],e,s,t),c=await crs.process.getValue(a.args.selected_count||0,e,s,t);g==="idb"&&globalThis.hasDataManagerDB!=!0&&(await import("./../../../packages/crs-process-api/action-systems/managers/indexdb-manager.js"),await crs.call("idb","connect",{name:"data-manager",version:1,count:50,storeNames:[]}),globalThis.hasDataManagerDB=!0),globalThis.dataManagers||={},globalThis.dataManagers[r]==null&&(globalThis.dataManagers[r]=new d[g](r,n));const i=globalThis.dataManagers[r];return g==="perspective"&&(i.perspective=await crs.process.getValue(a.args.perspective,e,s,t),i.manager=await crs.process.getValue(a.args.source_manager,e,s,t)),g!=="perspective"&&(await i.setRecords(l),i.selectedCount=c),globalThis.dataManagers[r]}static async dispose(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);globalThis.dataManagers[r].dispose(),delete globalThis.dataManagers[r]}static async record_count(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);return r==null?0:globalThis.dataManagers[r].count}static async selected_count(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);return r==null?0:globalThis.dataManagers[r].selectedCount}static async get_counts(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return 0;const n=globalThis.dataManagers[r];return{total:n.count,selected:n.selectedCount}}static async set_records(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.records||[],e,s,t),g=globalThis.dataManagers[r];await g.setRecords(n),await g.notifyChanges({action:o.refresh,count:g.count})}static async append(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.records||[],e,s,t),g=globalThis.dataManagers[r],l=g.count;await g.append(...n),await g.notifyChanges({action:o.add,models:n,index:l,count:n.length})}static async remove(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.indexes,e,s,t),g=await crs.process.getValue(a.args.ids,e,s,t),l=globalThis.dataManagers[r];n!=null?await l.removeIndexes(n):await l.removeIds(g),await l.notifyChanges({action:o.delete,indexes:n,ids:g})}static async update(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.index,e,s,t),g=await crs.process.getValue(a.args.id,e,s,t),l=await crs.process.getValue(a.args.changes,e,s,t),c=globalThis.dataManagers[r];let i;n!=null?i=await c.updateIndex(n,l):i=await c.updateId(g,l),await c.notifyChanges({action:o.update,id:i.id,index:i.index,changes:i.changes})}static async set_group_selected(a,e,s,t){}static async set_selected(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.selected??!0,e,s,t),g=await crs.process.getValue(a.args.indexes,e,s,t),l=await crs.process.getValue(a.args.ids,e,s,t),c=globalThis.dataManagers[r];g!=null?await c.setSelectedIndexes(g,n):await c.setSelectedIds(l,n),await c.notifyChanges({action:o.selected,id:l,index:g,changes:n})}static async toggle_selection(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.indexes,e,s,t),g=await crs.process.getValue(a.args.ids,e,s,t),l=globalThis.dataManagers[r];n!=null?await l.toggleSelectedIndexes(n):await l.toggleSelectedIds(g),await l.notifyChanges({action:o.selected,id:g,index:n,changes:"toggle"})}static async set_select_all(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.selected??!0,e,s,t),g=globalThis.dataManagers[r];await g.setSelectedAll(n),await g.notifyChanges({action:o.selected,changes:n?"all":"none"})}static async filter_selected(a,e,s,t){}static async get_selected(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);return r==null?void 0:await globalThis.dataManagers[r].getSelected()}static async get_unselected(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);return r==null?void 0:await globalThis.dataManagers[r].getSelected(!1)}static async update_batch(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.batch,e,s,t),g=globalThis.dataManagers[r];await g.beginTransaction();for(let l of n){let c;l.index!=null?c=await g.updateIndex(l.index,l.changes):c=await g.updateId(l.id,l.changes),await g.notifyChanges({action:o.update,index:c.index,id:c.id,model:await g.getByIndex(c.index)})}await g.commit()}static async get(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.index,e,s,t),g=await crs.process.getValue(a.args.id,e,s,t);return n!=null?globalThis.dataManagers[r].getByIndex(n):globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getById(g)}static async get_batch(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.from,e,s,t),g=await crs.process.getValue(a.args.to,e,s,t);return globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getPage(n,g)}static async get_page(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.page,e,s,t),g=await crs.process.getValue(a.args.size,e,s,t);if(globalThis.dataManagers[r]==null)return null;const l=n*g-g,c=l+g;return await globalThis.dataManagers[r].getPage(l,c)}static async get_all(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r!=null)return globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getAll()}static async get_ids(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.indexes,e,s,t);return globalThis.dataManagers[r]==null?null:globalThis.dataManagers[r].getIds(n)}static async on_change(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null)return;const n=await crs.process.getValue(a.args.callback,e,s,t);return globalThis.dataManagers[r].addChangeCallback(n)}static async remove_change(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r==null||globalThis.dataManagers[r]==null)return;const n=await crs.process.getValue(a.args.callback,e,s,t);return globalThis.dataManagers[r].removeChangeCallback(n)}static async is_all_selected(a,e,s,t){const r=await crs.process.getValue(a.args.manager,e,s,t);if(r!=null)return globalThis.dataManagers[r].isAllSelected}}crs.intent.data_manager=u;
