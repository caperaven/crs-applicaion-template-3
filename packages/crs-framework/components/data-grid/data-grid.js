import"./actions/editing-actions.js";import{addColumnFeatures as s}from"./columns.js";import{addSelectionFeature as i}from"./selection.js";import{selectedConverter as l}from"./value-converters/selected-converter.js";import{enableInput as o,disableInput as c}from"./input.js";class n extends crs.classes.BindableElement{#e;#t;get shadowDom(){return!0}get columns(){return this.#e}get columnGroups(){return this.#t}get selectionType(){return this.dataset.selection||"none"}get html(){return import.meta.url.replace(".js",".html")}async connectedCallback(){await super.connectedCallback(),crs.binding.valueConvertersManager.add("selected",l),this.#e=[],this.#t=[],await s(this),await i(this),await o(this)}async disconnectedCallback(){crs.binding.valueConvertersManager.remove("selected"),this.#e=null,this.#t=null,await c(this),await super.disconnectedCallback()}async rowExecute(e){const t=e.composedPath()[0];if(e.ctrlKey==!0)return await crs.call("grid_editing","edit",{element:t});e.preventDefault(),this.dispatchEvent(new CustomEvent("row-execute",{bubbles:!0,composed:!0,detail:t}))}async addColumnElements(e){dispatchEvent(new CustomEvent("columns-added",{bubbles:!0,composed:!0,detail:this}))}async modifyRecord(e,t,r,a){a!=null&&(r=await crs.binding.valueConvertersManager.convert(r,a.converter,"set",a.parameter))}}customElements.define("data-grid",n);export{n as default};
