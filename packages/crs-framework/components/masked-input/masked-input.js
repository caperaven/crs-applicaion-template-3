import{MaskManager as i}from"./mask-manager.js";class s extends HTMLInputElement{#e;#t;#i;async connectedCallback(){this.#i=this.#r.bind(this),this.#t=new i(this.dataset.mask,this.#i),this.#s(),this.#n()}async disconnectedCallback(){this.#e=crs.binding.utils.disposeProperties(this.#e),crs.binding.dom.disableEvents(this),this.#t=this.#t.dispose(),this.#i=null}#s(){this.#e=Object.freeze({ArrowLeft:this.#t.moveIndexLeft.bind(this.#t),ArrowRight:this.#t.moveIndexRight.bind(this.#t),Backspace:this.#t.clearBack.bind(this.#t)})}#n(){crs.binding.dom.enableEvents(this),this.registerEvent(this,"focus",this.#h.bind(this)),this.registerEvent(this,"keydown",this.#c.bind(this)),this.registerEvent(this,"click",this.#a.bind(this))}#r(t,e){this.value=t,this.setSelectionRange(e,e)}async#h(t){t.preventDefault(),requestAnimationFrame(()=>{const e=this.#t.currentIndex;this.setSelectionRange(e,e)})}async#a(t){this.selectionEnd-this.selectionStart>1||(t.preventDefault(),requestAnimationFrame(()=>{if(this.#t.isFilled)return this.#t.setCursor(this.selectionStart);const e=this.#t.currentIndex;this.setSelectionRange(e,e)}))}async#c(t){if(!(t.key.toLowerCase()=="a"&&t.ctrlKey==!0)&&t.key!="Tab"&&t.shiftKey!=!0&&(t.preventDefault(),t.key!=" ")){if(this.#e[t.key]!=null)return this.#e[t.key](this.selectionStart,this.selectionEnd);if(this.selectionStart!=this.selectionEnd&&(this.#t.clearBack(this.selectionStart,this.selectionEnd),this.selectionEnd=this.selectionStart),t.key.length==1)return this.#t.set(t.key)}}}customElements.define("masked-input",s,{extends:"input"});export{s as MaskedInput};
