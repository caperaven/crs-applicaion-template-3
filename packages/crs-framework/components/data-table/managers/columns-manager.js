class r{#s=[];#i=[];get gridTemplateColumns(){return this.#s.map(s=>`${s}px`).join(" ")}get columns(){return this.#i}dispose(){return this.#s.length=0,this.#i.length=0,null}set(s){this.#s.length=0,this.#i.length=0;for(const i of s)this.#s.push(i.width),this.#i.push(i)}async append(s,i,t){s.indexOf("&{")!==-1&&(s=await crs.binding.translations.get_with_markup(s)),this.#s.push(i),this.#i.push({title:s,width:i,property:t})}async insert(s,i,t,h){if(!n(this.#s,s))return this.append(i,t,h);i.indexOf("&{")!==-1&&(i=await crs.binding.translations.get_with_markup(i)),this.#s.splice(s,0,t),this.#i.splice(s,0,{title:i,width:t,property:h})}async remove(s){n(this.#s,s)&&(this.#s.splice(s,1),this.#i.splice(s,1))}async move(s,i){if(!n(this.#s,s)||!n(this.#s,i))return;const t=this.#s[s],h=this.#i[s];this.#s.splice(s,1),this.#i.splice(s,1),this.#s.splice(i,0,t),this.#i.splice(i,0,h)}async resize(s,i){n(this.#s,s)&&(this.#s[s]=i,this.#i[s].width=i)}getColumnIndex(s){return this.#i.findIndex(i=>i.property===s)}}function n(e,s){return s>=0&&s<e.length}export{r as ColumnsManager};
