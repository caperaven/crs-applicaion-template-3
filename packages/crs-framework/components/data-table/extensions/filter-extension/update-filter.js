async function g(l,c,s,n){const t=await crs.call("data_manager","get_counts",{manager:n});if(t.selected===0)return;if(t.total==t.selected)return await crs.call("perspective","remove_filter",{perspective:l,field:c});let r="eq";const u=t.total/2,o=t.total-t.selected>=u||t.selected===1,e=await f(n,o);switch(s){case"number":{for(let a=0;a<e.length;a++)e[a]=Number(e[a]);break}case"boolean":{for(let a=0;a<e.length;a++)e[a]=e[a].toLowerCase()==="true";break}default:break}e.length>1&&(r=o?"in":"not_in");const i=e.length===1?e[0]:e;await crs.call("perspective","add_filter",{perspective:l,field:c,operator:r,value:i})}async function f(l,c=!0){const s=c?"get_selected":"get_unselected";return(await crs.call("data_manager",s,{manager:l})).map(t=>t.value)}export{g as updateFilter};
