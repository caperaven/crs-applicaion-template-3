import"./data-table.js";import{DataTableExtensions as r}from"./data-table-extensions.js";class i{static async perform(a,e,s,t){let n=i[a.action];if(n)return n(a,e,s,t)}static async set_columns(a,e,s,t){const n=await crs.dom.get_element(a.args.element,e,s,t),l=await crs.process.getValue(a.args.columns,e,s,t)}static async set_formatter(a,e,s,t){const n=await crs.process.getValue(a.args.element,e,s,t),l=await crs.process.getValue(a.args.settings,e,s,t),c=await crs.process.getValue(a.args.enabled??!0,e,s,t);await n.setExtension(r.FORMATTING.name,l,c),n.dataset.ready==="true"&&await n.updateInflation()}static async set_editing(a,e,s,t){const n=await crs.process.getValue(a.args.element,e,s,t),l=await crs.process.getValue(a.args.enabled,e,s,t);await n.setExtension(r.CELL_EDITING.name,null,l)}static async set_resize(a,e,s,t){const n=await crs.process.getValue(a.args.element,e,s,t),l=await crs.process.getValue(a.args.enabled,e,s,t);await n.setExtension(r.RESIZE.name,null,l)}static async set_filter(a,e,s,t){const n=await crs.process.getValue(a.args.element,e,s,t),l=await crs.process.getValue(a.args.enabled,e,s,t),c=await crs.process.getValue(a.args.settings,e,s,t);await n.setExtension(r.FILTER.name,c,l)}}crs.intent.data_table=i;
