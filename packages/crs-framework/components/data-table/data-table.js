import{loadHTML as l}from"./../../src/load-resources.js";import{CHANGE_TYPES as r}from"../../src/managers/data-manager/data-manager-types.js";import{ColumnsManager as h}from"./managers/columns-manager.js";import{columnsFromChildren as c}from"./utils/columnsFromChildren.js";import{columnsHeadersFactory as d}from"./factories/columns-headers-factory.js";import{rowInflationFactory as m}from"./factories/row-inflation-factory.js";import{rowFactory as p}from"./factories/row-factory.js";import{MouseInputManager as u}from"./managers/mouse-input-manager.js";import{KeyboardInputManager as g}from"./managers/keyboard-input-manager.js";import{DataTableExtensions as n}from"./data-table-extensions.js";import{formattingFromChildren as f}from"./utils/formattingFromChildren.js";import"./../../src/managers/perspective-manager/perspective-manager-actions.js";class w extends HTMLElement{#a=new h;#r;#t;#s;#h;#o=this.#f.bind(this);#i;#l;#n;#e={[n.FORMATTING.name]:n.FORMATTING.path,[n.CELL_EDITING.name]:n.CELL_EDITING.path,[n.RESIZE.name]:n.RESIZE.path,[n.FILTER.name]:n.FILTER.path};#c;#d;get oldDataManager(){return this.#r}set oldDataManager(t){this.#r=t}get dataManager(){return this.#t}set dataManager(t){this.#t=t}get perspectiveDataManagerKey(){return this.#h}get perspective(){return this.#s}get selectedRows(){return this.#c}get selectedCells(){return this.#d}#p={[r.add]:this.#w,[r.update]:this.#y,[r.delete]:this.#M,[r.filter]:this.#b,[r.refresh]:this.refresh,[r.perspectiveChanged]:this.#I,[r.perspectiveRollback]:this.#T};get#m(){return dataManagers[this.#t].idField}constructor(){super(),this.attachShadow({mode:"open"})}async connectedCallback(){await c(this,this.#a),await f(this),this.innerHTML="",this.shadowRoot.innerHTML=await l(import.meta.url),await this.load(),await crs.call("component","notify_ready",{element:this})}load(){return new Promise(t=>{requestAnimationFrame(async()=>{this.#t=this.dataset.manager,this.#s=this.dataset.perspective,this.#h=`${this.id}_${this.#s}`,await this.#u(),this.#l=new g(this),this.#n=new u(this),this.dataset.filterable==="true"&&await crs.call("data_table","set_filter",{element:this,enabled:!0}),this.dataset.resizeable==="true"&&await crs.call("data_table","set_resize",{element:this,enabled:!0}),await crs.call("perspective","register",{perspective:this.#s}),t()})})}async disconnectedCallback(){await crs.call("dom_interactive","disable_resize",{element:this}),await crs.call("perspective","unregister",{perspective:this.#s});for(const t of Object.values(n))this.disposeExtension(t.name);this.#a=this.#a.dispose(),await this.#g(),this.#o=null,this.#i=null,this.#l=this.#l.dispose(),this.#n=this.#n.dispose(),this.#e=null,this.#r=null,this.#t=null,this.#s=null,this.#c=null,this.#d=null}disposeExtension(t,e=!1){this.#e[t].dispose!=null&&(this.#e[t]=this.#e[t].dispose(e))}async#u(){await crs.call("data_manager","on_change",{manager:this.#t,callback:this.#o})}async#g(){await crs.call("data_manager","remove_change",{manager:this.#t,callback:this.#o})}async#f(t){t.action===r.refresh&&this.dataset.paged==="true"||await this.#p[t.action].call(this,t)}async#w(t){}async#y(t){}async#M(t){}async#b(t){}async#E(t){await this.#C(),await this.#v(t)}async#C(){this.style.setProperty("--columns",this.#a.gridTemplateColumns);const t=await d(this.#a.columns,this);this.shadowRoot.appendChild(t)}async#v(t){await this.updateInflation();const e=document.createDocumentFragment(),s=p(this.#a.columns,this.#m);for(const a of t){const i=await s(a,e);this.#i(a,i)}this.shadowRoot.appendChild(e)}async#R(t){const e=Array.from(this.shadowRoot.querySelectorAll("[data-id]")),s=t.length-e.length;if(s>0){const a=document.createDocumentFragment();for(let i=0;i<s;i++){const o=e[0].cloneNode(!0);e.push(o),a.appendChild(o)}this.shadowRoot.appendChild(a)}if(s<0)for(let a=0;a<Math.abs(s);a++)e.pop().remove();for(let a=0;a<t.length;a++){const i=t[a],o=e[a];await this.#i(i,o)}}async#I(){await crs.binding.events.emitter.postMessage(`[for="#${this.id}"]`,{action:"data-manager-changed",manager:this.#t})}async#T(){this.#t=this.#r,await crs.binding.events.emitter.postMessage(`[for="#${this.id}"]`,{action:"data-manager-changed",manager:this.#t})}async refresh(t=null){t||=await crs.call("data_manager","get_all",{manager:this.#t}),this.#i==null?await this.#E(t):await this.#R(t)}async setExtension(t,e,s){const a=this.#e[t],i=typeof a;if(i==="string"&&s===!0){this.#e[t]=new(await import(a)).default(this,e),this.#e[t].settings=e;return}if(i==="object"&&s===!1)return this.disposeExtension(t,!0)}async callExtension(t,e,s){if(typeof this.#e[t]!="string")return await this.#e[t][e](s)}getColumnIndex(t){return this.#a.getColumnIndex(t)}async updateInflation(){this.#i=await m(this,this.#a.columns,this.#m)}async addClickHandler(t,e){await this.#n.addClickHandler(t,e)}async removeClickHandler(t){await this.#n.removeClickHandler(t)}}customElements.define("data-table",w);export{w as DataTable};
